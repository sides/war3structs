import sys, os, time, configparser

def generate_trigger_data_patch(trigger_data_path, out_path):
  if not os.path.exists(trigger_data_path):
    raise Exception("Specified trigger data file does not exist")

  contents = ""
  with open(trigger_data_path, "r") as trigger_data_file:
    contents = trigger_data_file.read()
    # Syntax error as of 1.30.1
    contents = contents.replace("_BlzGetUnitAbilityManaCost_Limits-_,_,_,_,1,_", "_BlzGetUnitAbilityManaCost_Limits=_,_,_,_,1,_")

  config = configparser.ConfigParser(
    delimiters=("="),
    # We will actually interpret the options starting with _ as
    # comments, because we don't care about those extra options,
    # even though they are technically meaningful.
    comment_prefixes=("//", "_"),
    strict=False
  )
  config.optionxform = str
  config.read_string(contents)

  masterlist = {}

  # Assume no duplicates
  functions = {**dict(config["TriggerEvents"]), **dict(config["TriggerConditions"]), **dict(config["TriggerActions"])}
  for key, value in functions.items():
    args = value.split(",")
    args_count = len(args) - 1
    if args_count >= 1 and args[1] == "nothing":
      args_count = 0
    masterlist[key] = args_count

  calls = dict(config["TriggerCalls"])
  for key, value in calls.items():
    args = value.split(",")
    args_count = len(args) - 3
    if args_count >= 1 and args[3] == "nothing":
      args_count = 0
    masterlist[key] = args_count

  params = dict(config["TriggerParams"])
  for key, value in params.items():
    masterlist[key] = 0

  generated_contents = "# Automatically generated by trigger_data_generator on %s\n" % time.strftime("%c")
  generated_contents += "functions_parameter_counts = %s" % str(masterlist)

  with open(out_path, "w") as out_file:
    out_file.write(generated_contents)

def main():
  try:
    generate_trigger_data_patch(sys.argv[1], "../war3structs/patch/TriggerData.py")
  except Exception as err:
    print("Failed: %s" % str(err))
    sys.exit(1)

if __name__ == "__main__":
  main()
