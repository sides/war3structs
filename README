war3structs
-----------------

Python construct definitions for Warcraft III file formats.


Summary
-----------------

war3structs was originally meant to be declarative definitions for
file structures used by Warcraft. This means it provides both utility
for hacking away at maps on the command-line or with scripts using
Python, while also serving as readable documentation of them so they
can be implemented in other more performance oriented languages.

It does this, and has since evolved to include support for almost all
file formats used by Warcraft, including plaintext and storage,
allowing programs like war3archiver to achieve their goal purely in
Python.


Structures
-----------------

Structures are located in war3structs/ and come with full structures
for files themselves (inside e.g. a map archive). Example:

  >>> from war3structs import CamerasFile
  >>> with open("./war3map.w3c", "rb") as data:
  ...   cameras = CamerasFile.parse_stream(data)
  ...   print(cameras)
  ...
  Container:
      version = 0
      cameras_count = 1
      cameras = ListContainer:
          Container:
              target_x = 100
              target_y = 100
              offset_z = 0.0
              rotation = 90.0
              angle_of_attack = 304.0
              distance = 2000.0
              roll = 0.0
              field_of_view = 70.0
              far_clipping = 5000.0
              name = u'myCamera' (total 8)

Files are Structs and come with parsing and building options as per the
construct package.

Read more about construct: https://github.com/construct/construct


JASS
-----------------

It also comes with some support for the plaintext formats, such as
JASS, using a Lark parser. Example:

  >>> from war3structs.plaintext import JassParser
  >>> with open("./war3map.j", "r") as data:
  ...   contents = data.read()
  ...   ast = JassParser.parse(contents)
  ...   print(ast['main'].statements[0])
  ...
  [Token(CALL, 'call'), Token(ID, 'ExecuteFunc'), Token(LPARENS, '('),
  Token(STRING_LITERAL, '"InitTrig_MyTrigger"'), Token(RPARENS, ')')]

Read more about Lark: https://github.com/lark-parser/lark


MPQ
-----------------

It can also read MPQs and CASC storage. However, it achieves this via
bindings to StormLib and CascLib. You will therefore not find
documentation on these formats in this repo. Example:

>>> from war3structs.storage import MPQ
>>> map = MPQ('./map.w3x')
>>> map.read('(listfile)')
b'war3map.w3e\r\nwar3map.w3i\r\nwar3map.wtg\r\nwar3map.wct\r\nwar3map.w
ts\r\nwar3map.j\r\nwar3map.shd\r\nwar3mapMap.blp\r\nwar3map.mmp\r\nwar3
map.wpm\r\nwar3map.doo\r\nwar3mapUnits.doo\r\nwar3map.w3r\r\nwar3map.w3
c\r\nwar3map.w3u\r\nwar3map.w3t\r\nwar3map.w3b\r\nwar3map.w3a\r\nwar3ma
p.w3h\r\nwar3map.w3q\r\nwar3map.w3s\r\nwar3map.imp\r\nwar3mapMisc.txt\r
\nwar3mapSkin.txt\r\n'

Read more about StormLib: https://github.com/ladislav-zezula/StormLib
Read more about CascLib: https://github.com/ladislav-zezula/CascLib


Status
-----------------

Since these are used for the development of the map Warlock they will
continue to be updated for Warcraft 3 Reforged and beyond. The package
will most likely use semver to tag releases appropriately for when
the structures change with new patches to Warcraft (if they change).
